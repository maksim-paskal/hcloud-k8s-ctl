{{ if .Values.deployments.nfs.server.enabled }}
kind: Service
apiVersion: v1
metadata:
  name: nfs-server
  labels:
    app: nfs-server
spec:
  type: ClusterIP
  clusterIP: {{ .Values.deployments.nfs.server.clusterIP }}
  selector:
    app: nfs-server
  ports:
  - name: tcp-2049
    port: 2049
    protocol: TCP
  - name: udp-111
    port: 111
    protocol: UDP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nfs-server
spec:
  serviceName: "nfs-server"
  replicas: 1
  selector:
    matchLabels:
      app: nfs-server
  template:
    metadata:
      name: nfs-server
      labels:
        app: nfs-server
    spec:
      priorityClassName: system-cluster-critical
{{ if .Values.deployments.nfs.server.affinity }}
      affinity:
{{ toYaml .Values.deployments.nfs.server.affinity | indent 8 }}
{{ end }}
{{ if .Values.deployments.nfs.server.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.deployments.nfs.server.nodeSelector | indent 8 }}
{{ end }}
{{ if .Values.deployments.nfs.server.tolerations }}
      tolerations:
{{ toYaml .Values.deployments.nfs.server.tolerations | indent 6 }}
{{ end }}
      containers:
      - name: nfs-server
        image: {{ printf "%s:%s" .Values.deployments.nfs.server.image.repository .Values.deployments.nfs.server.image.tag }}
        imagePullPolicy: {{ .Values.deployments.nfs.server.image.pullPolicy }}
        env:
{{ toYaml .Values.deployments.nfs.server.env | indent 8 }}
        volumeMounts:
        - mountPath: /exports
          name: nfs-data
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: "50m"
            memory: "300Mi"
        readinessProbe:
          exec:
            command:
            - showmount
            - -e
            - 127.0.0.1
          initialDelaySeconds: 10
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: nfs-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 200Gi
{{ end }}